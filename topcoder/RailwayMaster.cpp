#include <bits/stdc++.h>
#define ll        long long int
#define ld        long double
#define pi        pair<int,int>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl
#define clr(x,v)  memset(x, v, sizeof(x))
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const ll inf = 1LL << 30;
const int MAXN = 1e2 + 5;

int parent[MAXN], sz[MAXN];
void make_set(int n)
{
    iota(parent, parent + n, 0);
    fill(sz, sz + n, 1);
}
int find_set(int v)
{
    if(v == parent[v])
        return v;
    else
        return parent[v] = find_set(parent[v]);
}
bool union_set(int a, int b)
{
    a = find_set(a), b = find_set(b);
    if(sz[a] < sz[b])
        swap(a, b);
    if(a != b)
        parent[b] = a, sz[a] += sz[b];
    return a != b;
}


class RailwayMaster
{
public:
    int maxProfit(int, int, int, vector <int>, vector <int>, vector <int>);
};

int RailwayMaster::maxProfit(int N, int M, int K, vector <int> a, vector <int> b, vector <int> v)
{
    make_set(N);
    vector<vector<int>> edges;
    for(int i = 0; i < M; i++)
        edges.pb({a[i], b[i], v[i]});
    sort(all(edges), [&](vector<int> X, vector<int> Y)
    {
        return X[2] < Y[2];
    });
    vector<int> nonmst;
    for(int i = 0; i < M; i++)
    {
        if(!union_set(edges[i][0], edges[i][1]))
            nonmst.pb(edges[i][2]);
    }

    int sum = 0;
    while(!nonmst.empty() && K > 0)
        sum += nonmst.back(), nonmst.pop_back(), K--;
    return sum;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, vector <int> p3, vector <int> p4, vector <int> p5, bool hasAnswer, int p6)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p3[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p4.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p4[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p5.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p5[i];
    }
    cout << "}";
    cout << "]" << endl;
    RailwayMaster *obj;
    int answer;
    obj = new RailwayMaster();
    clock_t startTime = clock();
    answer = obj->maxProfit(p0, p1, p2, p3, p4, p5);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p6 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p6;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    vector <int> p3;
    vector <int> p4;
    vector <int> p5;
    int p6;

    {
        // ----- test 0 -----
        p0 = 3;
        p1 = 3;
        p2 = 3;
        int t3[] = {0, 1, 2};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        int t4[] = {1, 2, 0};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {224, 258, 239};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        p6 = 258;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 4;
        p1 = 6;
        p2 = 2;
        int t3[] = {0, 0, 0, 1, 1, 2};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        int t4[] = {1, 2, 3, 2, 3, 3};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {500, 900, 600, 700, 800, 100};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        p6 = 1700;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 5;
        p1 = 7;
        p2 = 1;
        int t3[] = {0, 1, 2, 3, 3, 0, 1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        int t4[] = {1, 2, 3, 4, 0, 2, 3};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {100, 100, 100, 900, 100, 100, 100};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        p6 = 100;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 5;
        p1 = 7;
        p2 = 3;
        int t3[] = {0, 0, 0, 0, 1, 2, 3};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        int t4[] = {1, 1, 1, 1, 2, 3, 4};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {926, 815, 777, 946, 928, 634, 999};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        p6 = 2687;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 5;
        p1 = 7;
        p2 = 6;
        int t3[] = {0, 1, 2, 3, 4, 1, 3};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        int t4[] = {1, 2, 3, 4, 0, 4, 0};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {118, 124, 356, 480, 625, 767, 911};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        p6 = 2303;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 10;
        p1 = 15;
        p2 = 3;
        int t3[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        int t4[] = {1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 5, 6, 7, 8, 9};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {220284, 869120, 787788, 980412, 133333, 314159, 256312, 192916, 298575, 931110, 175353, 926778, 201513, 202729, 155136};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        p6 = 2838300;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
