#include <bits/stdc++.h>
#define ll        long long int
#define ld        long double
#define pi        pair<int,int>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl
#define clr(x,v)  memset(x, v, sizeof(x))
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const ll inf = 1LL << 30;
const int MAXN = 1e5 + 5;

class EpicPartition
{
public:
    string createPartition(int);
};

string EpicPartition::createPartition(int N)
{
    string ans(6 * N, 'b');
    if(N % 4) return "";
    int k = N / 4;
    ans[24 * k - 1] = 'c';
    ans[18 * k - 1] = 'c';
    ans[9 * k - 1] = 'a';
    ans[12 * k - 1] = 'a';
    for(int i = 1; i <= 4 * k - 1; i++)
    {
        ans[18 * k - 1 - i] = 'c', ans[18 * k - 1 + i] = 'c';
        if(i == 3 * k)
            ans[5 * k - 1] = 'a', ans[13 * k - 1] = 'a';
        else
            ans[9 * k - 1 - i] = 'a', ans[9 * k - 1 + i] = 'a';
    }

    // int a = 0, b = 0, c = 0;
    // for(int i = 0; i < 6 * N; i++)
    //     if(ans[i] == 'a')
    //         a += i + 1;
    //     else if(ans[i] == 'b')
    //         b += i + 1;
    //     else
    //         c += i + 1;
    // dbg(a);
    // dbg(b);
    // dbg(c);
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, string p1)
{
    cout << "Test " << testNum << ": [" << p0;
    cout << "]" << endl;
    EpicPartition *obj;
    string answer;
    obj = new EpicPartition();
    clock_t startTime = clock();
    answer = obj->createPartition(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    string p1;

    {
        // ----- test 0 -----
        p0 = 1;
        p1 = "";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 2;
        p1 = "";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 4;
        p1 = "aaabababbbbabbcccccccaac";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 8;
        p1 = "abaaaaaabaabbaabbbbbbbbbbbbccccccccaaccccccacaac";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
