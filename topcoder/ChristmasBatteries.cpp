#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e6 + 5;

class ChristmasBatteries
{
public:
    int mostFun(int, int, int, int, int, int);
};

int B, N, X, Y, Z, M;
vector<int> fun;

int dp[MAXN][8];

int ChristmasBatteries::mostFun(int B, int N, int X, int Y, int Z, int M)
{
    ::B = B;
    ::N = N;
    ::X = X;
    ::Y = Y;
    ::Z = Z;
    ::M = M;

    fun.assign(N, 0);
    for(int i = 0; i < N; i++)
    {
        int a = ((X * i) % M * i) % M;
        int b = (Y * i) % M;
        fun[i] = (a + b + Z) % M;
    }

    for(int i = N - 1; i >= 0; i--)
        for(int j = 0; j <= B; j++)
        {
            int need = i % 5;
            if(j >= need)
                dp[i][j] = max(dp[i][j], fun[i] + dp[i + 1][j - need]);
            dp[i][j] = max(dp[i][j], dp[i + 1][j]);
        }

    return dp[0][B];
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, bool hasAnswer, int p6)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5;
    cout << "]" << endl;
    ChristmasBatteries *obj;
    int answer;
    obj = new ChristmasBatteries();
    clock_t startTime = clock();
    answer = obj->mostFun(p0, p1, p2, p3, p4, p5);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p6 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p6;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;
    int p4;
    int p5;
    int p6;

    {
        // ----- test 0 -----
        p0 = 0;
        p1 = 5;
        p2 = 1;
        p3 = 1;
        p4 = 1;
        p5 = 1000;
        p6 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 3;
        p1 = 5;
        p2 = 1;
        p3 = 1;
        p4 = 1;
        p5 = 1000;
        p6 = 14;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 3;
        p1 = 5;
        p2 = 1;
        p3 = 1;
        p4 = 1;
        p5 = 13;
        p6 = 11;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 4;
        p1 = 10000;
        p2 = 123;
        p3 = 456;
        p4 = 789;
        p5 = 1;
        p6 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 7;
        p1 = 4;
        p2 = 3;
        p3 = 5;
        p4 = 7;
        p5 = 997;
        p6 = 100;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 2;
        p1 = 12345;
        p2 = 234;
        p3 = 34;
        p4 = 5;
        p5 = 117;
        p6 = 143371;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 5;
        p1 = 939800;
        p2 = 95;
        p3 = 760;
        p4 = 117;
        p5 = 475;
        p6 = 21991839;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
            // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
