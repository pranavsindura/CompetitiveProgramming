#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 1e3 + 5;

class RobotTesting
{
public:
    double estimateCommands(int, string);
};

bool vis[MAXN][MAXN], instack[MAXN][MAXN];
ll dp[MAXN][MAXN];
int n;

bool inside(int x, int y)
{
    return (x >= 0 && x < n && y >= 0 && y < n);
}

void dfs(int x, int y, string &s)
{
    vis[x][y] = 1;
    instack[x][y] = 1;
    dp[x][y] = 0;
    int nx = x, ny = y;
    for(int c : s)
    {
        dp[x][y]++;
        if(c == 'L')ny--;
        else if(c == 'R')ny++;
        else if(c == 'U')nx--;
        else if(c == 'D')nx++;
        if(!inside(nx, ny))break;
    }

    if(inside(nx, ny))
    {
        if(!vis[nx][ny])
            dfs(nx, ny, s), dp[x][y] += dp[nx][ny];
        else if(instack[nx][ny])
            dp[x][y] = 50000;
        else
            dp[x][y] += dp[nx][ny];
        dp[x][y] = min(dp[x][y], 50000LL);
    }

    instack[x][y] = 0;
}

double RobotTesting::estimateCommands(int N, string program)
{
    n = N;
    clr(vis, false);
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            if(!vis[i][j])
                dfs(i, j, program);
    double ans = 0;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            ans += dp[i][j];
    ans /= n * n;
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, string p1, bool hasAnswer, double p2)
{
    cout << "Test " << testNum << ": [" << p0 << "," << "\"" << p1 << "\"";
    cout << "]" << endl;
    RobotTesting *obj;
    double answer;
    obj = new RobotTesting();
    clock_t startTime = clock();
    answer = obj->estimateCommands(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    string p1;
    double p2;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = "L";
        p2 = 1.5;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 2;
        p1 = "LURD";
        p2 = 12501.0;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 4;
        p1 = "LDLDLDRRR";
        p2 = 3.375;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 29;
        p1 = "RRULDD";
        p2 = 53.236623067776456;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 697;
        p1 = "LLLLLDRRRRR";
        p2 = 3806.5179340028694;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
