#include <bits/stdc++.h>
#define ll        long long int
#define ld        long double
#define pi        pair<int,int>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl
#define clr(x,v)  memset(x, v, sizeof(x))
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1812447359;
const ll inf = 1LL << 30;
const int MAXN = 1e5 + 5;

class SwapTheString
{
public:
    long long findNumberOfSwaps(string, int, int, int, int, int);
};

ll merge(string &s, int l, int m, int r)
{
    int n1 = m - l + 1, n2 = r - m;
    string L, R;
    for(int i = 0; i < n1; i++)
        L += s[i + l];
    for(int i = 0; i < n2; i++)
        R += s[m + i + 1];

    ll inv = 0;
    int i = 0, j = 0, k = l;
    while(i < n1 && j < n2)
    {
        if(L[i] >= R[j])
            s[k++] = L[i++];
        else
            s[k++] = R[j++], inv += n1 - i;
    }
    while(i < n1)
        s[k++] = L[i++];
    while(j < n2)
        s[k++] = R[j++];
    return inv;
}

ll merge_sort(string &s, int l, int r)
{
    if(l < r)
    {
        int m = (l + r) >> 1;
        ll left = merge_sort(s, l, m);
        ll right = merge_sort(s, m + 1, r);
        ll mid = merge(s, l, m, r);
        return left + right + mid;
    }
    return 0;
}

long long SwapTheString::findNumberOfSwaps(string P, int A0, int X, int Y, int N, int K)
{
    vector<int> A = {A0};
    for(int i = 1; i < N; i++)
        A.pb((A[i - 1] * 1LL * X + Y) % mod);
    string S = P;
    for(int i = ln(P); i < N; i++)
        S += (char)(A[i] % 26 + 'a');
    vector<string> split(K);
    for(int i = 0; i < N; i++)
        split[i % K] += S[i];
    ll ans = 0;
    for(string x : split)
        ans += merge_sort(x, 0, ln(x) - 1);
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, int p3, int p4, int p5, bool hasAnswer, long long p6)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5;
    cout << "]" << endl;
    SwapTheString *obj;
    long long answer;
    obj = new SwapTheString();
    clock_t startTime = clock();
    answer = obj->findNumberOfSwaps(p0, p1, p2, p3, p4, p5);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p6 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p6;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    int p1;
    int p2;
    int p3;
    int p4;
    int p5;
    long long p6;

    {
        // ----- test 0 -----
        p0 = "cbexa";
        p1 = 0;
        p2 = 0;
        p3 = 0;
        p4 = 5;
        p5 = 2;
        p6 = 2ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "";
        p1 = 5;
        p2 = 2;
        p3 = 3;
        p4 = 4;
        p5 = 1;
        p6 = 3ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "b";
        p1 = 1001;
        p2 = 1001;
        p3 = 1001;
        p4 = 5;
        p5 = 2;
        p6 = 3ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "";
        p1 = 9999;
        p2 = 50000;
        p3 = 4797;
        p4 = 6;
        p5 = 3;
        p6 = 2ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "";
        p1 = 3435;
        p2 = 1000000000;
        p3 = 1812447358;
        p4 = 7;
        p5 = 2;
        p6 = 5ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
