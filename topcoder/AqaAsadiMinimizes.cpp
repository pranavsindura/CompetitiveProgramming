#include <bits/stdc++.h>
#define ll        long long int
#define ld        long double
#define pi        pair<int,int>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl
#define clr(x,v)  memset(x, v, sizeof(x))
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const ll inf = 1LL << 30;
const int MAXN = 1e5 + 5;

class AqaAsadiMinimizes
{
public:
    double getMin(vector <int>, int, int, int, int);
};

double AqaAsadiMinimizes::getMin(vector <int> P, int B0, int X, int Y, int N)
{
    vector<int> arr(N);
    for(int i = 0; i < N; i++)
    {
        if(i < sz(P)) arr[i] = P[i];
        if(i == sz(P)) arr[i] = B0;
        if(i > sz(P)) arr[i] = (arr[i - 1] * 1LL * X + Y) % mod;
    }
    vector<pi> b;
    for(int i = 0; i < N; i++)
        b.pb({arr[i], i});
    sort(all(b));
    double ans = DBL_MAX;
    for(int i = 0; i < N - 1; i++)
        ans = min(ans, double(fabs(b[i].ff - b[i + 1].ff)) / double(fabs(b[i].ss - b[i + 1].ss)));
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, int p3, int p4, bool hasAnswer, double p5)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1 << "," << p2 << "," << p3 << "," << p4;
    cout << "]" << endl;
    AqaAsadiMinimizes *obj;
    double answer;
    obj = new AqaAsadiMinimizes();
    clock_t startTime = clock();
    answer = obj->getMin(p0, p1, p2, p3, p4);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p5 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = fabs(p5 - answer) <= 1e-9 * max(1.0, fabs(p5));
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    int p2;
    int p3;
    int p4;
    double p5;

    {
        // ----- test 0 -----
        int t0[] = {11, 0, 30, 20, 1000};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        p2 = 0;
        p3 = 0;
        p4 = 5;
        p5 = 3.0;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {47, 1, 10, 3, 2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        p2 = 0;
        p3 = 0;
        p4 = 5;
        p5 = 0.3333333333333333;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {123456};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 234567890;
        p2 = 345678;
        p3 = 456789;
        p4 = 10;
        p5 = 8333191.571428572;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
