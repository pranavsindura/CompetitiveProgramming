#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e5 + 5;

class Lottery
{
public:
    vector <string> sortByOdds(vector <string>);
};

ll C[101][9], P[101][9], D[9][101];
ll fact[9];
void init()
{
    clr(C, 0);
    for(int i = 0; i < 101; i++)
        C[i][0] = 1;
    for(int i = 1; i < 101; i++)
        for(int j = 1; j < 9; j++)
            C[i][j] = C[i - 1][j] + C[i - 1][j - 1];

    fact[0] = 1;
    for(int i = 1; i < 9; i++) fact[i] = fact[i - 1] * i;

    clr(P, 0);
    for(int i = 1; i < 101; i++)
        P[i][0] = 1;
    for(int i = 1; i < 101; i++)
        for(int j = 1; j < 9; j++)
            P[i][j] = P[i][j - 1] * i;

    clr(D, 0);
    D[0][1] = 1;
    for(int i = 1; i <= 8; i++)
        for(int j = 1; j <= 100; j++)
            for(int k = 1; k <= j; k++)
                D[i][j] += D[i - 1][k];
}

vector <string> Lottery::sortByOdds(vector <string> rules)
{
    init();
    vector<pair<ll, string>> A;
    for(auto s : rules)
    {
        string name;
        reverse(all(s));
        while(s.back() != ':') name += s.back(), s.pop_back();
        s.pop_back(), s.pop_back();
        reverse(all(s));

        stringstream ss(s);
        int choice, blank, sorted, unique;
        string Sorted, Unique;
        ss >> choice >> blank >> Sorted >> Unique;
        sorted = Sorted == "T";
        unique = Unique == "T";

        pair<ll, string> v = {0, name};
        if(sorted && unique)
            v.first = C[choice][blank];
        else if(sorted && !unique)
        {
            for(int i = 1; i <= choice; i++)
                v.first += D[blank][i];
        }
        else if(!sorted && unique)
            v.first = C[choice][blank] * fact[blank];
        else
            v.first = P[choice][blank];

        A.push_back(v);
    }

    sort(all(A));
    vector<string> ans;
    for(auto x : A) ans.push_back(x.second);
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    Lottery *obj;
    vector <string> answer;
    obj = new Lottery();
    clock_t startTime = clock();
    answer = obj->sortByOdds(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i)
        {
            if (i > 0)
            {
                cout << ",";
            }
            cout << "\"" << p1[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if (hasAnswer)
    {
        if (answer.size() != p1.size())
        {
            res = false;
        }
        else
        {
            for (int i = 0; int(answer.size()) > i; ++i)
            {
                if (answer[i] != p1[i])
                {
                    res = false;
                }
            }
        }
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;

    {
        // ----- test 0 -----
        string t0[] = {"PICK ANY TWO: 10 2 F F", "PICK TWO IN ORDER: 10 2 T F", "PICK TWO DIFFERENT: 10 2 F T", "PICK TWO LIMITED: 10 2 T T"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"PICK TWO LIMITED", "PICK TWO IN ORDER", "PICK TWO DIFFERENT", "PICK ANY TWO"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"INDIGO: 93 8 T F", "ORANGE: 29 8 F T", "VIOLET: 76 6 F F", "BLUE: 100 8 T T", "RED: 99 8 T T", "GREEN: 78 6 F T", "YELLOW: 75 6 F F"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"RED", "ORANGE", "YELLOW", "GREEN", "BLUE", "INDIGO", "VIOLET"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0.clear() /*{}*/;
        p1.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
