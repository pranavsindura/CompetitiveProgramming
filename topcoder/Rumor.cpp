#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 1e6 + 5;
const int inf = 1e7;

class Rumor
{
public:
    int getMinimum(string, vector <string>);
};

int Rumor::getMinimum(string knowledge, vector <string> graph)
{
    int n = ln(knowledge);
    int ans = inf;

    if(knowledge == string(n, 'Y'))
        return 0;

    vector<int> affect(n);
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            affect[i] |= ((graph[i][j] == 'Y') << j);

    int init = 0;
    for(int i = 0; i < n; i++)
        if(knowledge[i] == 'Y')
            init |= 1 << i;

    for(int start = 0; start < 1 << n; start++)
    {
        int knowa = init, knowb = init;
        int fresha = init, freshb = init;
        int steps = 0;
        while(steps <= n)
        {
            if(knowa + 1 == (1 << n) && knowb + 1 == (1 << n)) break;
            if(!fresha && !freshb) break;
            steps++;
            int na = knowa, nb = knowb;
            for(int i = 0; i < n; i++)
            {
                int cana = (fresha >> i) & 1;
                int canb = (freshb >> i) & 1;
                if(cana && canb)
                {
                    if((start >> i) & 1)
                        na |= affect[i], fresha ^= 1 << i;
                    else
                        nb |= affect[i], freshb ^= 1 << i;
                }
                else if(cana)
                    na |= affect[i], fresha ^= 1 << i;
                else if(canb)
                    nb |= affect[i], freshb ^= 1 << i;
            }
            fresha |= na ^ knowa;
            freshb |= nb ^ knowb;
            knowa = na, knowb = nb;
        }
        if(knowa + 1 == (1 << n) && knowb + 1 == (1 << n))
            ans = min(ans, steps);
    }
    if(ans == inf)
        ans = -1;
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, int p2)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    Rumor *obj;
    int answer;
    obj = new Rumor();
    clock_t startTime = clock();
    answer = obj->getMinimum(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p2;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    vector <string> p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = "YNN";
        string t1[] = {"NYN", "NNY", "NNN"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 3;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "YNNY";
        string t1[] = {"NYYN", "YNNY", "YNNY", "NYYN"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "YYYY";
        string t1[] = {"NYNN", "YNYN", "NYNY", "NNYN"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 0;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "YYYYYN";
        string t1[] = {"NYYYYN", "YNYYYN", "YYNYYN", "YYYNYN", "YYYYNN", "NNNNNN"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = -1;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "NNNY";
        string t1[] = {"NNNN", "YNNN", "YNNN", "NYYN"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 3;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "NNNNNNNYYY";
        string t1[] = {"NYNNYNNYNN", "NNYNYNNNNY", "YYNNNYNNNN", "YNNNYNYNNN", "NNYNNYNNYN", "NNNNYNNNYY", "NYNYNYNNNN", "NNNNNNYNYY", "NNNYNNNYNY", "NYYNNNNYNN"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 2;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 5 -----
        p0 = "YNNNNNNNNNNNNNNN";
        string t1[] =
        {"NYNNNNNNNNNNNNNN", "NNYNNNNNNNNNNNNN", "NNNYNNNNNNNNNNNN", "NNNNYNNNNNNNNNNN", "NNNNNYNNNNNNNNNN", "NNNNNNYNNNNNNNNN", "NNNNNNNYNNNNNNNN", "NNNNNNNNYNNNNNNN", "NNNNNNNNNYNNNNNN", "NNNNNNNNNNYNNNNN", "NNNNNNNNNNNYNNNN", "NNNNNNNNNNNNYNNN", "NNNNNNNNNNNNNYNN", "NNNNNNNNNNNNNNYN", "NNNNNNNNNNNNNNNY", "NNNNNNNNNNNNNNNN"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 16;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
