#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 1e6 + 5;

class NearPalindromesDiv1
{
public:
    int solve(string);
};

int solve_even(vector<int> &odd)
{
    int ans = INT_MAX;
    int n = sz(odd);
    for(int i = 0; i < n; i++)
    {
        int me = 0;
        for(int j = 0; j < n; j += 2)
        {
            int diff = odd[(i + j) % n] - odd[(i + j + 1) % n] + 26;
            diff %= 26;
            if(diff > 13)
                diff = 26 - diff;
            me += diff;
        }
        ans = min(ans, me);
    }
    return ans;
}

int NearPalindromesDiv1::solve(string s)
{
    vector<int> freq(26);
    for(char x : s)
        freq[x - 'a']++;
    vector<int> odd;
    for(int i = 0; i < 26; i++)
        if(freq[i] & 1)
            odd.pb(i);

    if(sz(odd) <= 1) return 0;

    if(sz(odd) & 1)
    {
    	int n = sz(odd);
        int ans = INT_MAX;
        for(int i = 0; i < n; i++)
        {
            vector<int> arr;
            for(int j = 0; j < n; j++)
                if(i != j)
                    arr.pb(odd[j]);
            ans = min(ans, solve_even(arr));
        }
        return ans;
    }
    else
        return solve_even(odd);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    NearPalindromesDiv1 *obj;
    int answer;
    obj = new NearPalindromesDiv1();
    clock_t startTime = clock();
    answer = obj->solve(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    int p1;

    {
        // ----- test 0 -----
        p0 = "cocoa";
        p1 = 0;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "daddy";
        p1 = 2;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "abcdefgh";
        p1 = 4;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
