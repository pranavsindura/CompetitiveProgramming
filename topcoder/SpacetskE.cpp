#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 200 + 5;

ll C[MAXN][MAXN];
void init()
{
    clr(C, 0);
    for(int i = 0; i < MAXN; i++)
        C[i][0] = 1;
    for(int i = 1; i < MAXN; i++)
        for(int j = 1; j < MAXN; j++)
            C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod;
}

int sg(int x)
{
    if(x >= 0)
        return 1;
    else
        return -1;
}

class SpacetskE
{
public:
    int countsets(int, int, int);
};

int SpacetskE::countsets(int L, int H, int K)
{
    init();
    if(K == 1) return (L + 1) * (H + 1);
    ll ans = 0;
    for(int i = 0; i <= L; i++) // launch point
    {
        set<pi> done;
        for(int k = H; k >= 1; k--) // height
        {
            for(int j = 0; j <= L; j++)
            {
                //(i, 0) -> (j, k)
                int dx = j - i, dy = k;
                int sign = sg(dx) * sg(dy);
                int g = __gcd(abs(dx), abs(dy));
                int x = abs(dx) / g, y = abs(dy) / g;
                y *= sign;
                if(done.count({y, x})) continue;
                int points = g + 1;
                // printf("(%d,%d) -> (%d,%d) | %d\n", i, 0, j, k, points);
                ans = (ans + C[points][K]) % mod;
                done.insert({y, x});
            }
        }
    }
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    SpacetskE *obj;
    int answer;
    obj = new SpacetskE();
    clock_t startTime = clock();
    answer = obj->countsets(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        p0 = 1;
        p1 = 1;
        p2 = 2;
        p3 = 4;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 1;
        p1 = 1;
        p2 = 1;
        p3 = 4;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 2;
        p1 = 2;
        p2 = 1;
        p3 = 9;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 2;
        p1 = 2;
        p2 = 2;
        p3 = 23;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 5;
        p1 = 5;
        p2 = 3;
        p3 = 202;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 70;
        p1 = 52;
        p2 = 18;
        p3 = 296314116;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
