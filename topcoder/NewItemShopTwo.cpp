#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e5 + 5;

class NewItemShopTwo
{
public:
    double getMaximum(vector <string>);
};

double NewItemShopTwo::getMaximum(vector <string> customers)
{
    vector<vector<int>> cust;
    for(int i = 0; i < 2; i++)
    {
        stringstream ss(customers[i]);
        vector<string> split;
        string x;
        while(ss >> x) split.push_back(x);
        for(string &s : split)
        {
            for(char &c : s) if(c == ',') c = ' ';
            stringstream sss(s);
            int t, c, p;
            sss >> t >> c >> p;
            cust.push_back({t, c, p, i});
        }
    }

    sort(all(cust));

    double ans = 0;
    double P[2] = {0};
    for(int i = 0; i < sz(cust); i++)
    {
        int t = cust[i][0], c = cust[i][1], p = cust[i][2], who = cust[i][3];

        // sell
        double x = double(p) / 100. * (100. - P[!who]) / 100. * c;
        // dont sell
        double y = 0;
        for(int j = i + 1; j < sz(cust); j++) if(cust[j][3] != who) y += double(cust[j][2]) / 100. * cust[j][1];
        y *= double(p) / 100.;
        ans += max(x, y);
        P[who] += p;
    }
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    NewItemShopTwo *obj;
    double answer;
    obj = new NewItemShopTwo();
    clock_t startTime = clock();
    answer = obj->getMaximum(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    double p1;

    {
        // ----- test 0 -----
        string t0[] = {"8,1,80 16,100,11", "12,10,100"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 19.0;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"8,1,80 16,100,11", "12,10,90 13,30,5"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 19.4;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"0,90,25 2,90,25 4,90,25 6,90,25", "7,100,80"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 90.0;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"0,90,25 2,90,25 4,90,25 6,90,25", "7,100,95"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 95.0;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"0,3,1 2,4,1 4,5,9 6,2,6 8,5,3 10,5,8 12,9,7 14,9,3", "1,2,3 3,8,4 5,6,2 7,6,4 9,3,3 11,8,3 13,2,7 15,9,5"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3.0692999999999997;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
