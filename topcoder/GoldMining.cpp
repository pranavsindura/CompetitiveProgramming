#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 1e6 + 5;

class GoldMining
{
public:
    long long maxProfit(long long, long long, long long);
};

long long GoldMining::maxProfit(long long goldInGround, long long miningTime, long long hiringCost)
{
    ll gold = 0, people = 1;
    for(ll i = 0; i < miningTime; i++)
    {
        if(goldInGround == 0) break;
        ll more = 0, lo = 0, hi = min(gold / hiringCost, goldInGround / (miningTime - i) - people);
        while(lo <= hi)
        {
            ll mid = (lo + hi) >> 1;
            ll can = gold - mid * hiringCost + min(goldInGround, (people + mid) * (miningTime - i));
            if(can >= gold + min(goldInGround, people * (miningTime - i)))
                more = mid, lo = mid + 1;
            else
                hi = mid - 1;
        }
        people += more;
        gold -= more * hiringCost;
        ll take = min(goldInGround, people);
        gold += take;
        goldInGround -= take;
    }
    return gold;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, bool hasAnswer, long long p3)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    GoldMining *obj;
    long long answer;
    obj = new GoldMining();
    clock_t startTime = clock();
    answer = obj->maxProfit(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    long long p0;
    long long p1;
    long long p2;
    long long p3;

    {
        // ----- test 0 -----
        p0 = 470000ll;
        p1 = 1000000ll;
        p2 = 50ll;
        p3 = 470000ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 470000ll;
        p1 = 100000ll;
        p2 = 1234567890123456ll;
        p3 = 100000ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 470000ll;
        p1 = 100000ll;
        p2 = 57000ll;
        p3 = 100000ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 470000ll;
        p1 = 100000ll;
        p2 = 42000ll;
        p3 = 116000ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 567890ll;
        p1 = 4ll;
        p2 = 1ll;
        p3 = 8ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 234567ll;
        p1 = 47ll;
        p2 = 10ll;
        p3 = 215ll;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        p0 = 300ll;
        p1 = 47ll;
        p2 = 10ll;
        p3 = 190ll;
        all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 7 -----
        p0 = 987654321098765432ll;
        p1 = 100ll;
        p2 = 3ll;
        p3 = 2731288513472ll;
        all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
