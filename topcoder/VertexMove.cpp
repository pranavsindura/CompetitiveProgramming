#include <bits/stdc++.h>
#define ll        long long int
#define ld        long double
#define pi        pair<int,int>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl
#define clr(x,v)  memset(x, v, sizeof(x))
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const ll inf = 1LL << 30;
const int MAXN = 1e5 + 5;

class VertexMove
{
public:
    double largestTriangleArea(int, int, int);
};

double VertexMove::largestTriangleArea(int A, int B, int C)
{
    vector<int> arr = {A, B, C};
    // c^2 = a^2 + b^2 - 2abcosC
    int a = arr[0], b = arr[1], c = arr[2];
    double cosC = (a * a + b * b - c * c) / (2.0 * a * b);
    double Cs = acos(cosC);
    double y = a * sin(Cs);
    double ans = fabs(0.5 * y * b);
    for(int i = 0; i < 4; i++)
    {
        a = arr[0], b = arr[1], c = arr[2];
        // c^2 = a^2 + b^2 - 2abcosC
        // (0,0) (b, 0) (x, y)
        cosC = (a * a + b * b - c * c) / (2.0 * a * b);
        Cs = acos(cosC);
        y = a * sin(Cs);
        ans = max(ans, fabs(0.5 * (y + 1) * b));
        int d = arr.back();
        arr.pop_back();
        reverse(all(arr));
        arr.pb(d);
        reverse(all(arr));
    }
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    VertexMove *obj;
    double answer;
    obj = new VertexMove();
    clock_t startTime = clock();
    answer = obj->largestTriangleArea(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    double p3;

    {
        // ----- test 0 -----
        p0 = 3;
        p1 = 4;
        p2 = 5;
        p3 = 8.5;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 10;
        p1 = 10;
        p2 = 10;
        p3 = 48.30127018922193;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 12;
        p1 = 13;
        p2 = 16;
        p3 = 84.68727078205352;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
