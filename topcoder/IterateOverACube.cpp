#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e5 + 5;

class IterateOverACube
{
public:
    vector <int> findCell(int, long long);
};

vector <int> IterateOverACube::findCell(int N, long long index)
{
    vector<ll> sum2(3 * N), sum3(3 * N), pref(3 * N);

    for(int i = 0; i < 3 * N; i++)
    {
        int u = min(i, N - 1);
        int v = i - u;
        // ways to make sum i with 2 numbers
        sum2[i] = max(0, u - v + 1);
        pref[i] = sum2[i] + (i ? pref[i - 1] : 0);
        // ways to make sum i with 3 numbers
        int l = max(0, i - (N - 1));
        sum3[i] = pref[i] - (l ? pref[l - 1] : 0);
    }

    vector<int> ans(3);

    index++;
    int idx = -1;
    ll P = 0, before = 0;
    for(int i = 0; i < 3 * N && idx == -1; i++)
    {
        P += sum3[i];
        if(P >= index)
            idx = i;
        else
            before = P;
    }
    assert(~idx);
    // my actual sum = idx
    int sum = idx;

    index -= before;
    P = 0, before = 0;
    idx = -1;
    for(int i = 0; i <= sum && idx == -1; i++)
    {
        P += sum2[sum - i];
        if(P >= index)
            idx = i;
        else
            before = P;
    }
    assert(~idx);
    ans[0] = idx;
    sum -= idx;
    index -= before;

    for(int i = 0; i < 3 * N && index > 0; i++)
    {
        int u = i, v = sum - i;
        if(u < N && v >= 0 && v < N)
        {
            index--;
            ans[1] = u, ans[2] = v;
        }
    }
    assert(!index);
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, long long p1, bool hasAnswer, vector <int> p2)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1;
    cout << "]" << endl;
    IterateOverACube *obj;
    vector <int> answer;
    obj = new IterateOverACube();
    clock_t startTime = clock();
    answer = obj->findCell(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p2.size()) > i; ++i)
        {
            if (i > 0)
            {
                cout << ",";
            }
            cout << p2[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer)
    {
        if (answer.size() != p2.size())
        {
            res = false;
        }
        else
        {
            for (int i = 0; int(answer.size()) > i; ++i)
            {
                if (answer[i] != p2[i])
                {
                    res = false;
                }
            }
        }
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    long long p1;
    vector <int> p2;

    {
        // ----- test 0 -----
        p0 = 3;
        p1 = 9ll;
        int t2[] = {2, 0, 0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 3;
        p1 = 10ll;
        int t2[] = {0, 1, 2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 4747;
        p1 = 106968940722ll;
        int t2[] = {4746, 4746, 4746};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 4;
        p1 = 32ll;
        int t2[] = {0, 2, 3};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        p0 = 3;
        p1 = 14;
        int t2[] = {1, 2, 0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        p0 = 3;
        p1 = 16;
        int t2[] = {2, 1, 0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        p0 = 1000000;
        p1 = 1000000000000000000 - 1;
        int t2[] = {0, 2, 2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
