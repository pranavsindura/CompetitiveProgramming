#include <bits/stdc++.h>
#define ll        long long int
#define ld        long double
#define pi        pair<int,int>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl
#define clr(x,v)  memset(x, v, sizeof(x))
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const ll inf = 1LL << 40;
const int MAXN = 1e5 + 5;

class AtLeastKDays
{
public:
    long long sumOfMinCosts(vector <string>, int);
};

vector<vector<ll>> mul(vector<vector<ll>> &a, vector<vector<ll>> &b)
{
    int n = sz(a);
    vector<vector<ll>> c(n, vector<ll>(n, inf));
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            for(int k = 0; k < n; k++)
                c[i][j] = min(c[i][j], a[i][k] + b[k][j]);
    return c;
}

vector<vector<ll>> fpow(vector<vector<ll>> x, int y)
{
    int n = sz(x);
    vector<vector<ll>> res(n, vector<ll>(n, inf));
    for(int i = 0; i < n; i++) res[i][i] = 0;
    while(y > 0)
    {
        if(y & 1)
            res = mul(res, x);
        x = mul(x, x);
        y >>= 1;
    }
    return res;
}

long long AtLeastKDays::sumOfMinCosts(vector <string> costs, int K)
{
    ll ans = 0;
    int n = sz(costs);
    vector<vector<ll>> adj(n, vector<ll>(n, inf)), sp = adj;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            if(costs[i][j] == '-')
                adj[i][j] = sp[i][j] = inf;
            else
                adj[i][j] = sp[i][j] = costs[i][j] - '0';
    for(int i = 0; i < n; i++) sp[i][i] = 0; // needed because k > 0 and thus we can stay on a node
    for(int k = 0; k < n; k++)
        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                sp[i][j] = min(sp[i][j], sp[i][k] + sp[k][j]);
    adj = fpow(adj, K);
    adj = mul(adj, sp);
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            ans += adj[i][j];
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, long long p2)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    AtLeastKDays *obj;
    long long answer;
    obj = new AtLeastKDays();
    clock_t startTime = clock();
    answer = obj->sumOfMinCosts(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p2;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;
    long long p2;

    {
        // ----- test 0 -----
        string t0[] = {"-12", "3-6", "45-"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        p2 = 34ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"-111111111", "1-11111111", "11-1111111", "111-111111", "1111-11111", "11111-1111", "111111-111", "1111111-11", "11111111-1", "111111111-"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1000000000;
        p2 = 100000000000ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"-12", "3-6", "45-"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 6;
        p2 = 122ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
