#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e5 + 5;

class ShufflingMachine
{
public:
    double stackDeck(vector <int>, int, vector <int>, int);
};

double ShufflingMachine::stackDeck(vector <int> shuffle, int maxShuffles, vector <int> cardsReceived, int K)
{
    int n = sz(shuffle);
    vector<int> perm(n);
    iota(all(perm), 0);
    vector<int> freq(n);
    for(int t = 0; t < maxShuffles; t++)
    {
        vector<int> nperm(n);
        for(int i = 0; i < n; i++)
            nperm[i] = perm[shuffle[i]];
        perm = nperm;
        for(int p : cardsReceived)
            freq[perm[p]]++;
    }
    sort(all(freq));
    double ans = 0;
    while(K--)
        ans += freq.back(), freq.pop_back();
    ans /= maxShuffles;
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, vector <int> p2, int p3, bool hasAnswer, double p4)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1 << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << p3;
    cout << "]" << endl;
    ShufflingMachine *obj;
    double answer;
    obj = new ShufflingMachine();
    clock_t startTime = clock();
    answer = obj->stackDeck(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    vector <int> p2;
    int p3;
    double p4;

    {
        // ----- test 0 -----
        int t0[] = {1, 0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        int t2[] = {0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        p4 = 0.6666666666666666;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {1, 2, 0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 5;
        int t2[] = {0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        p4 = 0.8;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {1, 2, 0, 4, 3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 7;
        int t2[] = {0, 3};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        p4 = 1.0;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {0, 4, 3, 5, 2, 6, 1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 19;
        int t2[] = {1, 3, 5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        p4 = 1.0526315789473684;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {3, 4, 7, 2, 8, 5, 6, 1, 0, 9};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 47;
        int t2[] = {6, 3, 5, 2, 8, 7, 4};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 8;
        p4 = 6.297872340425532;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
