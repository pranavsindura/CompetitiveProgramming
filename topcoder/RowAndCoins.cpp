#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 1e6 + 5;

class RowAndCoins
{
public:
    string getWinner(string);
};

char char_of(int x)
{
    return (!x ? 'A' : 'B');
}

int dp[1 << 14][2];

int n;
string cells;
int solve(int mask, bool turn)
{
    // one position left
    if(mask && (mask & (mask - 1)) == 0)
    {
        int b = __builtin_ffs(mask) - 1;
        return cells[n - b - 1];
    }

    int &ret = dp[mask][turn];
    if(~ret)
        return ret;

    bool win = false;
    for(int i = n - 1; i >= 0; i--)
    {
        for(int j = i; j >= 0; j--)
        {
            if(i - j + 1 == n)
                continue;
            int sec = (1 << (i + 1)) - 1;
            sec ^= (1 << j) - 1;

            int part = mask & sec;
            if(part == sec)
            {
                // can remove this subarray
                int nmask = mask ^ sec;
                char who = solve(nmask, turn ^ 1);
                if(who == char_of(turn))
                    win = true;
            }
        }
    }

    if(win)
        return ret = char_of(turn);
    else
        return ret = char_of(!turn);
}

string RowAndCoins::getWinner(string cells)
{
    ::cells = cells;
    n = ln(cells);
    clr(dp, -1);
    char who = solve((1 << n) - 1, 0);
    if(who == 'A')
        return "Alice";
    else
        return "Bob";
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	RowAndCoins *obj;
	string answer;
	obj = new RowAndCoins();
	clock_t startTime = clock();
	answer = obj->getWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "ABBB";
	p1 = "Alice";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "BBBB";
	p1 = "Bob";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "BA";
	p1 = "Alice";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "BABBABBB";
	p1 = "Bob";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "ABABBBABAABBAA";
	p1 = "Alice";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "BBBAAABBAAABBB";
	p1 = "Bob";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
