#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e9;
const int MAXN = 1e5 + 5;

class PalindromizationDiv1
{
public:
    int getMinimumCost(string, vector <string>);
};

vector<int> add, rem;
vector<vector<int>> change;
int dp[55][55][26][26];
string word;
int solve(int i, int j, char A, char B)
{
    if(i >= j) return 0;

    int &ret = dp[i][j][A - 'a'][B - 'a'];
    if(~ret) return ret;
    ret = inf;

    int ans = inf;
    if(A == B)
        ans = min(ans, solve(i + 1, j - 1, word[i + 1], word[j - 1]));
    // erase word[i]
    ans = min(ans, rem[A - 'a'] + solve(i + 1, j, word[i + 1], B));
    // erase word[j]
    ans = min(ans, rem[B - 'a'] + solve(i, j - 1, A, word[j - 1]));
    // add word[i]
    ans = min(ans, add[A - 'a'] + solve(i + 1, j, word[i + 1], B));
    // add word[j]
    ans = min(ans, add[B - 'a'] + solve(i, j - 1, A, word[j - 1]));
    // change word[i] to something else
    for(char x = 'a'; x <= 'z'; x++)
        ans = min(ans, change[A - 'a'][x - 'a'] + solve(i, j, x, B));
    // change word[j] to something else
    for(char x = 'a'; x <= 'z'; x++)
        ans = min(ans, change[B - 'a'][x - 'a'] + solve(i, j, A, x));

    return ret = ans;
}

int PalindromizationDiv1::getMinimumCost(string word, vector <string> operations)
{
    add.assign(26, inf);
    rem.assign(26, inf);
    change.assign(26, vector<int>(26, inf));

    for(string op : operations)
    {
        stringstream ss(op);
        string s;
        char c1, c2;
        int x;
        ss >> s;
        if(s == "add")
            ss >> c1 >> x, add[c1 - 'a'] = x;
        else if(s == "erase")
            ss >> c1 >> x, rem[c1 - 'a'] = x;
        else if(s == "change")
            ss >> c1 >> c2 >> x, change[c1 - 'a'][c2 - 'a'] = x;
    }

    for(int i = 0; i < 26; i++)
        change[i][i] = 0;
    for(int k = 0; k < 26; k++)
        for(int i = 0; i < 26; i++)
            for(int j = 0; j < 26; j++)
                change[i][j] = min(change[i][j], change[i][k] + change[k][j]);
            
    for(int i = 0; i < 26; i++)
        for(int j = 0; j < 26; j++)
            rem[i] = min(rem[i], change[i][j] + rem[j]);
    for(int i = 0; i < 26; i++)
        for(int j = 0; j < 26; j++)
            add[i] = min(add[i], add[j] + change[j][i]);

    for(int i = 0; i < 26; i++)
        for(int j = 0; j < 26; j++)
            change[i][j] = min(change[i][j], rem[i] + add[j]);
    for(int k = 0; k < 26; k++)
        for(int i = 0; i < 26; i++)
            for(int j = 0; j < 26; j++)
                change[i][j] = min(change[i][j], change[i][k] + change[k][j]);

    clr(dp, -1);
    ::word = word;
    int ans = solve(0, ln(word) - 1, word.front(), word.back());
    if(ans == inf) ans = -1;
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, int p2)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    PalindromizationDiv1 *obj;
    int answer;
    obj = new PalindromizationDiv1();
    clock_t startTime = clock();
    answer = obj->getMinimumCost(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p2;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    vector <string> p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = "racecar";
        p1.clear() /*{}*/;
        p2 = 0;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "topcoder";
        string t1[] = {"erase t 1", "erase o 1", "erase p 1", "erase c 1", "erase d 1", "erase e 1", "erase r 1"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 5;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "topcoder";
        string t1[] = {"erase t 10", "erase o 1", "erase p 1", "erase c 1", "erase d 1", "erase e 1", "erase r 1"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 7;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "caaaaaab";
        string t1[] = {"change b a 100000", "change c a 100000", "change c d 50000", "change b e 50000", "erase d 50000", "erase e 49999"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 199999;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "moon";
        string t1[] = {"erase o 5", "add u 7", "change d p 3", "change m s 12", "change n d 6", "change s l 1"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = -1;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
