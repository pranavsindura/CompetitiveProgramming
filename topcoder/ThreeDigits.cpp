#include <bits/stdc++.h>
#define ll        long long int
#define ld        long double
#define pi        pair<int,int>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl
#define clr(x,v)  memset(x, v, sizeof(x))
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const ll inf = 1LL << 30;
const int MAXN = 1e5 + 5;

ll mul(ll x, ll y, ll m)
{
    ll res = 0;
    while(y > 0)
    {
        if(y & 1)
            res = (res % m + x % m) % m;
        x = (x % m + x % m) % m;
        y >>= 1;
    }
    return res;
}

ll fpow(ll x, ll y, ll m)
{
    ll res = 1;
    while(y > 0)
    {
        if(y & 1)
            res = mul(res, x, m);
        x = mul(x, x, m);
        y >>= 1;
    }
    return res;
}

class ThreeDigits
{
public:
    string calculate(int, int, int);
};

string ThreeDigits::calculate(int X, int Y, int Z)
{
    ll res = fpow(X, Y, Z * 1000000LL);
    res = (res * 1000LL) % (Z * 1000000LL);
    res /= Z;
    string s = to_string(res);
    ll num = 1;
    while(num < Z * 1000LL && Y > 0) num *= X, Y--;
    if(num >= Z * 1000LL) {while(sz(s) < 6) s = "0" + s;}
    while(sz(s) < 4) s = "0" + s;
    cout << s << endl;
    return s.substr(0, sz(s) - 3) + "." + s.substr(sz(s) - 3, 3);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, string p3)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    ThreeDigits *obj;
    string answer;
    obj = new ThreeDigits();
    clock_t startTime = clock();
    answer = obj->calculate(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p3 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    string p3;

    {
        // ----- test 0 -----
        p0 = 3;
        p1 = 5;
        p2 = 7;
        p3 = "34.714";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 4;
        p1 = 7;
        p2 = 32;
        p3 = "512.000";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 3;
        p1 = 2;
        p2 = 36;
        p3 = "0.250";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 7;
        p1 = 4;
        p2 = 47;
        p3 = "51.085";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 13;
        p1 = 6;
        p2 = 479;
        p3 = "076.845";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 1234;
        p1 = 56789;
        p2 = 123456;
        p3 = "133.942";
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        p0 = 999999999;
        p1 = 128;
        p2 = 1000000;
        p3 = "000.000";
        all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 7 -----
        p0 = 0;
        p1 = 22;
        p2 = 891;
        p3 = "0.000";
        all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
