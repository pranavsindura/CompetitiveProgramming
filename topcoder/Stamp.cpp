#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 1e6 + 5;
const int inf = 1e8;

class Stamp
{
public:
    int getMinimumCost(string, int, int);
};

string s;
int A, B;
int dp[55][55][3];

int solve(int i, int rem, int colour, int L)
{
    if(i == ln(s))
        return rem ? inf : 0;

    int &ret = dp[i][rem][colour];
    if(~ret)
        return ret;

    int ans = inf;
    if(rem)
    {
        char c;
        if(colour == 0) c = 'R';
        else if(colour == 1) c = 'G';
        else c = 'B';
        if(s[i] == '*' || s[i] == c)
            ans = min(ans, solve(i + 1, rem - 1, colour, L));
    }
    else
    {
        // start new
        if(s[i] == '*' || s[i] == 'R')
            ans = min(ans, B + solve(i + 1, L - 1, 0, L));
        if(s[i] == '*' || s[i] == 'G')
            ans = min(ans, B + solve(i + 1, L - 1, 1, L));
        if(s[i] == '*' || s[i] == 'B')
            ans = min(ans, B + solve(i + 1, L - 1, 2, L));

        // overlap with previous, must have prev colour
        char c;
        if(colour == 0) c = 'R';
        else if(colour == 1) c = 'G';
        else c = 'B';

        if((s[i] == '*' || s[i] == c) && i)
            for(int x = L - 2; x >= 0; x--)
                ans = min(ans, B + solve(i + 1, x, colour, L));
    }

    return ret = ans;
}

int Stamp::getMinimumCost(string desiredColor, int stampCost, int pushCost)
{
    s = desiredColor;
    A = stampCost, B = pushCost;
    int ans = inf;
    for(int L = 1; L <= ln(s); L++)
        clr(dp, -1), ans = min(ans, L * A + solve(0, 0, 0, L));
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
    cout << "]" << endl;
    Stamp *obj;
    int answer;
    obj = new Stamp();
    clock_t startTime = clock();
    answer = obj->getMinimumCost(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    int p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        p0 = "RRGGBB";
        p1 = 1;
        p2 = 1;
        p3 = 5;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "R**GB*";
        p1 = 1;
        p2 = 1;
        p3 = 5;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "BRRB";
        p1 = 2;
        p2 = 7;
        p3 = 30;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "R*RR*GG";
        p1 = 10;
        p2 = 58;
        p3 = 204;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "*B**B**B*BB*G*BBB**B**B*";
        p1 = 5;
        p2 = 2;
        p3 = 33;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "*R*RG*G*GR*RGG*G*GGR***RR*GG";
        p1 = 7;
        p2 = 1;
        p3 = 30;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
