#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 30;

class ConstructBST
{
public:
    long long numInputs(vector <int>);
};

ll C[MAXN][MAXN];
void init()
{
    clr(C, 0);
    for(int i = 0; i < MAXN; i++)
        C[i][0] = 1;
    for(int i = 1; i < MAXN; i++)
        for(int j = 1; j < MAXN; j++)
            C[i][j] = C[i - 1][j] + C[i - 1][j - 1];
}

int child_type(int child, int par)
{
    while(child > par)
    {
        if(child == 2 * par)
            return 1;
        if(child == 2 * par + 1)
            return 2;
        child /= 2;
    }
    return 0;
}

long long ConstructBST::numInputs(vector <int> tree)
{
    init();
    ll ans = 1;
    for(int x : tree)
    {
        vector<int> child(3);
        for(int y : tree)
            child[child_type(y, x)]++;
        ans *= C[child[1] + child[2]][child[1]];
    }
    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    ConstructBST *obj;
    long long answer;
    obj = new ConstructBST();
    clock_t startTime = clock();
    answer = obj->numInputs(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    long long p1;

    {
        // ----- test 0 -----
        int t0[] = {1, 2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1ll;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {1, 3, 6};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1ll;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {1, 2, 5, 3, 4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 8ll;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {1, 2, 4, 6, 3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 6ll;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {2, 4, 3, 62, 7, 15, 1, 31, 5, 14, 28, 57, 56, 114};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 96096ll;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {1, 2, 3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2LL;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
