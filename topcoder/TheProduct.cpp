#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 1e6 + 5;

class TheProduct
{
public:
    long long maxProduct(vector <int>, int, int);
};

int sg(int x)
{
    if(x > 0)
        return 1;
    else if(x < 0)
        return -1;
    else
        return 0;
}
int k, maxDist;
vector<int> arr;

ll dp[55][15][55][3];

ll solve(int i, int picked, int last, int prev_sg)
{
    if(i == sz(arr))
        return picked == k ? 1 : (prev_sg - 1 >= 0 ? -1e17 : 1e17);

    ll &ret = dp[i][picked][last][prev_sg];
    if(ret > -1e17)
        return ret;

    ll ans = (prev_sg - 1 >= 0 ? -1e17 : 1e17);

    // choose arr[i]
    if(picked < k && i - last <= maxDist)
    {
        int nsg = sg(arr[i] * (prev_sg - 1));
        if(prev_sg - 1 >= 0)
            ans = max(ans, arr[i] * solve(i + 1, picked + 1, i, nsg + 1));
        else
            ans = min(ans, arr[i] * solve(i + 1, picked + 1, i, nsg + 1));
    }
    if(prev_sg - 1 >= 0)
        ans = max(ans, solve(i + 1, picked, last, prev_sg));
    else
        ans = min(ans, solve(i + 1, picked, last, prev_sg));

    return ret = ans;
}

long long TheProduct::maxProduct(vector <int> numbers, int k, int maxDist)
{
    arr = numbers;
    ::k = k;
    ::maxDist = maxDist;

    for(int i = 0; i <= sz(arr); i++)
        for(int j = 0; j <= k; j++)
            for(int a = 0; a <= sz(arr); a++)
                for(int b = 0; b <= 2; b++)
                    dp[i][j][a][b] = -1e17;

    return solve(0, 0, sz(arr), 2);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, long long p3)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1 << "," << p2;
    cout << "]" << endl;
    TheProduct *obj;
    long long answer;
    obj = new TheProduct();
    clock_t startTime = clock();
    answer = obj->maxProduct(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    int p2;
    long long p3;

    {
        // ----- test 0 -----
        int t0[] = {7, 4, 7};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 1;
        p3 = 28ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {7, 4, 7};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 50;
        p3 = 49ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {-3, -5, -8, -9, -1, -2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = 3;
        p3 = -10ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {3, 0, -2, 10, 0, 0, 3, -8, 0, 2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 2;
        p3 = 0ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        int t0[] = {-10, 1, 2, 3, -1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 5;
        p3 = 10ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
