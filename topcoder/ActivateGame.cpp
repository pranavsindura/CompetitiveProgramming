#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e5 + 5;

class ActivateGame
{
public:
    int findMaxScore(vector <string>);
};

int n, m;
int arr[55][55];
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};

int get(char x)
{
    if(isdigit(x)) return x - '0';
    else if(islower(x)) return 10 + (x - 'a');
    else return 36 + (x - 'A');
}

struct cmp
{
    bool operator()(const pi &a, const pi &b)
    {
        int px = a.ff / m, py = a.ff % m;
        int x = a.ss / m, y = a.ss % m;
        int valA = abs(arr[px][py] - arr[x][y]);

        px = b.ff / m, py = b.ff % m;
        x = b.ss / m, y = b.ss % m;
        int valB = abs(arr[px][py] - arr[x][y]);

        return valA < valB;
    }
};

int ActivateGame::findMaxScore(vector <string> grid)
{
    n = sz(grid), m = sz(grid[0]);

    for(int i = 0; i < n; i++)
        for(int j = 0; j < m; j++)
            arr[i][j] = get(grid[i][j]);

    vector<vector<bool>> vis(n, vector<bool>(m));
    priority_queue<pi, vector<pi>, cmp> pq;

    int total = 0;

    pq.push({0, 0});
    while(!pq.empty())
    {
        pi a = pq.top();
        pq.pop();
        int px = a.ff / m, py = a.ff % m;
        int x = a.ss / m, y = a.ss % m;
        int valA = abs(arr[px][py] - arr[x][y]);
        if(vis[x][y]) continue;
        vis[x][y] = 1;
        total += valA;

        for(int i = 0; i < 4; i++)
        {
            int nx = x + dx[i], ny = y + dy[i];
            if(nx >= 0 && nx < n && ny >= 0 && ny < m)
                pq.push({x * m + y, nx * m + ny});
        }
    }

    return total;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    ActivateGame *obj;
    int answer;
    obj = new ActivateGame();
    clock_t startTime = clock();
    answer = obj->findMaxScore(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;

    {
        // ----- test 0 -----
        string t0[] = {"05", "aB"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 69;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"03", "21"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 7;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"John", "Brus", "Gogo"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 118;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"AAA", "AAA", "AAA"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
