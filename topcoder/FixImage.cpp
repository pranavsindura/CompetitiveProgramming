#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e5 + 5;

class FixImage
{
public:
    vector <string> originalImage(vector <string>);
};

int n, m;
bool valid(int i, int j)
{
    return i >= 0 && i < n && j >= 0 && j < m;
}

int vis[55][55];
void dfs(int i, int j, int C, vector<string> &arr)
{
    if(!valid(i, j) || vis[i][j] || arr[i][j] == '.') return;
    vis[i][j] = C;
    dfs(i + 1, j, C, arr);
    dfs(i - 1, j, C, arr);
    dfs(i, j + 1, C, arr);
    dfs(i, j - 1, C, arr);
}

vector <string> FixImage::originalImage(vector <string> arr)
{
    n = sz(arr), m = sz(arr[0]);
    while(true)
    {
        vector<string> A = arr;
        int comp = 1;
        clr(vis, 0);
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                if(!vis[i][j] && A[i][j] == '#')
                    dfs(i, j, comp, A), comp++;
        // for(int i = 0; i < n; i++, cout << endl)
        //     for(int j = 0; j < m; j++)
        //         cout << vis[i][j] << " ";
        // cout << endl;
        for(int i = 0; i < n; i++)
        {
            map<int, int> idx;
            for(int j = 0; j < m; j++)
            {
                if(!vis[i][j]) continue;
                if(idx.count(vis[i][j]))
                {
                    int l = idx[vis[i][j]];
                    int r = j;
                    for(int k = l; k <= r; k++)
                        A[i][k] = '#';
                }
                idx[vis[i][j]] = j;
            }
        }
        for(int j = 0; j < m; j++)
        {
            map<int, int> idx;
            for(int i = 0; i < n; i++)
            {
                if(!vis[i][j]) continue;
                if(idx.count(vis[i][j]))
                {
                    int l = idx[vis[i][j]];
                    int r = i;
                    for(int k = l; k <= r; k++)
                        A[k][j] = '#';
                }
                idx[vis[i][j]] = i;
            }
        }
        // for(int i = 0; i < n; i++)
        //     cout << A[i] << endl;
        // cout << endl;
        if(A == arr) break;
        arr = A;
    }
    return arr;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    FixImage *obj;
    vector <string> answer;
    obj = new FixImage();
    clock_t startTime = clock();
    answer = obj->originalImage(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i)
        {
            if (i > 0)
            {
                cout << ",";
            }
            cout << "\"" << p1[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if (hasAnswer)
    {
        if (answer.size() != p1.size())
        {
            res = false;
        }
        else
        {
            for (int i = 0; int(answer.size()) > i; ++i)
            {
                if (answer[i] != p1[i])
                {
                    res = false;
                }
            }
        }
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;

    {
        // ----- test 0 -----
        string t0[] = {"....", ".##.", ".##.", "...."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"....", ".##.", ".##.", "...."};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {".....", ".###.", ".#.#.", ".###.", "....."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {".....", ".###.", ".###.", ".###.", "....."};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {".......", ".###...", ".#..##.", ".###.#.", ".....#."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {".......", ".###...", ".#####.", ".#####.", ".....#."};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {".................", "#####.#..#..#####", "..#...#..#....#..", "..#...#..###..#..", "................."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {".................", "#####.#..#..#####", "..#...#..#....#..", "..#...#..###..#..", "................."};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"###.####", "#.#.#..#", ".#...#.#", ".#####.#", "......#.", "########"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"########", "########", "########", "########", "########", "########"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        string t0[] = {"..###..", "..#.#..", "##...##", "#.....#", "#.....#", "#.....#", "##...##", "..#.#..", "..###.."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"..###..", "..###..", "##...##", "##...##", "##...##", "##...##", "##...##", "..###..", "..###.."};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
