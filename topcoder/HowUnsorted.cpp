#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = (1LL << 31) - 1;
const int MAXN = 1e6 + 5;

class HowUnsorted
{
public:
    long long howMany(int, int, int);
};

vector<ll> arr;

ll merge(int l, int m, int r)
{
    int n1 = m - l + 1, n2 = r - m;
    vector<ll> L(n1), R(n2);
    for(int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(int i = 0; i < n2; i++)
        R[i] = arr[m + 1 + i];

    ll inv = 0;
    int i = 0, j = 0, k = l;
    while(i < n1 && j < n2)
    {
        if(L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++], inv += n1 - i; // inversions are added
    }
    while(i < n1)
        arr[k++] = L[i++];
    while(j < n2)
        arr[k++] = R[j++];

    return inv;
}

ll merge_sort(int l, int r)
{
    if(l >= r)
        return 0;
    int m = (l + r) >> 1;
    ll left = merge_sort(l, m);
    ll right = merge_sort(m + 1, r);
    ll mid = merge(l, m, r);
    return left + right + mid;
}

long long HowUnsorted::howMany(int m, int c, int n)
{
    arr.resize(n);
    arr[0] = 1;
    for(int i = 1; i < n; i++)
        arr[i] = ((arr[i - 1] * m) % mod + c) % mod;
    return merge_sort(0, n - 1);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, long long p3)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    HowUnsorted *obj;
    long long answer;
    obj = new HowUnsorted();
    clock_t startTime = clock();
    answer = obj->howMany(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}

int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    long long p3;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = 10;
        p2 = 5;
        p3 = 0ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 1000;
        p1 = 100;
        p2 = 6;
        p3 = 3ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 1234257123;
        p1 = 123;
        p2 = 1500;
        p3 = 558406ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
