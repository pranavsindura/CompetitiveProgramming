#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 50 + 5;

class KingdomReorganization
{
public:
    int getCost(vector <string>, vector <string>, vector <string>);
};

int parent[MAXN], sz[MAXN];
void make_set(int n)
{
    iota(parent, parent + n, 0);
    fill(sz, sz + n, 1);
}
int find_set(int v)
{
    if(v == parent[v])
        return v;
    else
        return parent[v] = find_set(parent[v]);
}
bool union_set(int a, int b)
{
    a = find_set(a), b = find_set(b);
    if(sz[a] < sz[b])
        swap(a, b);
    if(a != b)
        parent[b] = a, sz[a] += sz[b];
    return a != b;
}

int get(char x)
{
    if(isupper(x)) return (x - 'A');
    else return (x - 'a') + 26;
}

int KingdomReorganization::getCost(vector <string> kingdom, vector <string> build, vector <string> destroy)
{
    int n = sz(kingdom);
    vector<vector<int>> adj(n, vector<int>(n)), destroycost = adj;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            adj[i][j] = kingdom[i][j] - '0';
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            destroycost[i][j] = get(destroy[i][j]);

    int total = 0;
    vector<vector<int>> edges;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            if(adj[i][j])
                total += destroycost[i][j], edges.push_back({i, j, destroycost[i][j]});
    total /= 2;
    sort(all(edges), [&](vector<int> a, vector<int> b)
    {
        return a[2] > b[2];
    });

    make_set(n);
    for(auto v : edges)
        if(union_set(v[0], v[1]))
            total -= v[2];

    int comp = 0;
    vector<int> idx(n);
    for(int i = 0; i < n; i++)
        if(find_set(i) == i)
            idx[i] = comp++;

    edges.clear();

    vector<vector<int>> adjcomp(comp, vector<int>(comp)), buildcost(comp, vector<int>(comp, inf));

    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            if(find_set(i) != find_set(j))
                adjcomp[idx[find_set(i)]][idx[find_set(j)]] = 1, buildcost[idx[find_set(i)]][idx[find_set(j)]] = min(get(build[i][j]), buildcost[idx[find_set(i)]][idx[find_set(j)]]);

    for(int i = 0; i < comp; i++)
        for(int j = 0; j < comp; j++)
            if(adjcomp[i][j])
                edges.push_back({i, j, buildcost[i][j]});

    sort(all(edges), [&](vector<int> a, vector<int> b)
    {
        return a[2] < b[2];
    });

    make_set(comp);
    for(auto v : edges)
        if(union_set(v[0], v[1]))
            total += v[2];
    return total;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, int p3)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    KingdomReorganization *obj;
    int answer;
    obj = new KingdomReorganization();
    clock_t startTime = clock();
    answer = obj->getCost(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;
    vector <string> p2;
    int p3;

    {
        // ----- test 0 -----
        string t0[] = {"000", "000", "000"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"ABD", "BAC", "DCA"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"ABD", "BAC", "DCA"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 3;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"011", "101", "110"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"ABD", "BAC", "DCA"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"ABD", "BAC", "DCA"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"011000", "101000", "110000", "000011", "000101", "000110"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"ABDFFF", "BACFFF", "DCAFFF", "FFFABD", "FFFBAC", "FFFDCA"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"ABDFFF", "BACFFF", "DCAFFF", "FFFABD", "FFFBAC", "FFFDCA"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 7;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"0"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"A"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"A"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"0001", "0001", "0001", "1110"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"AfOj", "fAcC", "OcAP", "jCPA"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"AWFH", "WAxU", "FxAV", "HUVA"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 0;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        string t0[] = {"0000000000", "0000000011", "0001010000", "0010010000", "0000001000", "0011000000", "0000100000", "0000000011", "0100000101", "0100000110"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"AhPEqkSFMM", "hAfKPtsDad", "PfAyGQkaqN", "EKyAeLpRpm", "qPGeASfNwo", "ktQLSAnCAK", "SskpfnAdJS", "FDaRNCdAZz", "MaqpwAJZAn", "MdNmoKSznA"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"AgTqWWxEYH", "gAXPgjzIRA", "TXAleTmWvT", "qPlAQkwxRO", "WgeQAqgbJJ", "WjTkqAiTzl", "xzmwgiAuHb", "EIWxbTuAwk", "YRvRJzHwAn", "HATOJlbknA"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 65;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
