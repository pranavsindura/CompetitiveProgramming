#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e5 + 5;

class EquiDigitNumbers
{
public:
    long long findNext(string);
};

int scmp(string A, string B)
{
    reverse(all(A));
    while(ln(A) < ln(B)) A += '0';
    reverse(all(A));

    reverse(all(B));
    while(ln(B) < ln(A)) B += '0';
    reverse(all(B));

    if(A == B) return 0;
    else if(A < B) return -1;
    else return 1;
}

string smin(string A, string B)
{
    int c = scmp(A, B);
    if(c <= 0) return A;
    else return B;
}

long long EquiDigitNumbers::findNext(string N)
{
    vector<ll> fact(20, 1);
    for(int i = 1; i < 20; i++) fact[i] = fact[i - 1] * i;

    auto get = [&](int n, int step, vector<int> freq)
    {
        ll total = fact[n - step - 1];
        for(int i = 0; i < sz(freq); i++)
            total /= fact[freq[i]];
        return total;
    };

    string ANS(19, '9');
    for(int k = 1; k <= 19; k++)
    {
        for(int use = 1; use < (1 << 10); use++)
        {
            if(__builtin_popcount(use) * k > 19) continue;
            int n = __builtin_popcount(use) * k;
            vector<int> cnt(10);
            for(int i = 0; i < 10; i++)
                if((use >> i) & 1)
                    cnt[i] = k;

            string ans = "-1";
            ll lo = 0, hi = get(n, -1, cnt);
            while(lo <= hi)
            {
                ll mid = (lo + hi) >> 1;

                vector<int> freq = cnt;
                string gen;
                ll sum = 0;
                for(int i = 0; i < n; i++)
                {
                    int place = -1;
                    for(int j = 0; j <= 9; j++)
                    {
                        if(!freq[j]) continue;
                        freq[j]--;
                        ll me = get(n, i, freq);
                        if(sum + me < mid)
                            sum += me;
                        else
                        {
                            place = j;
                            break;
                        }
                        freq[j]++;
                    }
                    assert(~place);
                    gen += char(48 + place);
                }
                if(scmp(gen, N) < 0)
                    lo = mid + 1;
                else
                {
                    if(gen[0] == '0')
                        lo = mid + 1;
                    else
                        ans = gen, hi = mid - 1;
                }
            }

            if(ans != "-1")
                ANS = smin(ans, ANS);
        }
    }
    return stoll(ANS);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, long long p1)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    EquiDigitNumbers *obj;
    long long answer;
    obj = new EquiDigitNumbers();
    clock_t startTime = clock();
    answer = obj->findNext(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    long long p1;

    // {
    //     // ----- test 0 -----
    //     p0 = "42";
    //     p1 = 42ll;
    //     all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    //     // ------------------
    // }

    // {
    //     // ----- test 1 -----
    //     p0 = "2008";
    //     p1 = 2013ll;
    //     all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    //     // ------------------
    // }

    // {
    //     // ----- test 2 -----
    //     p0 = "987654322";
    //     p1 = 987778899ll;
    //     all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    //     // ------------------
    // }

    // {
    //     // ----- test 3 -----
    //     p0 = "12345678910";
    //     p1 = 22222222222ll;
    //     all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    //     // ------------------
    // }

    {
        // ----- test 3 -----
        p0 = "1000000000000000000";
        p1 = 22222222222ll;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
