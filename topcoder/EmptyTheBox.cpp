#include <bits/stdc++.h>
#define ll        long long int
#define ld        long double
#define pi        pair<int,int>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl
#define clr(x,v)  memset(x, v, sizeof(x))
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const ll inf = 1LL << 30;
const int MAXN = 1e5 + 5;

class EmptyTheBox
{
public:
    double minExpectedPenalty(int, int);
};
double dp[1 << 12];
vector<double> prob;
vector<int> val;
int n, D, T;
double solve(int mask)
{
    if(mask == 0) return 0;

    double &ret = dp[mask];
    if(fabs(ret + 1) > eps)
        return ret;

    double ans = 0;
    for(int i = 2; i <= 2 * D; i++)
    {
        double me = prob[i] * val[mask];
        for(int msk = mask; msk; msk = (msk - 1)&mask)
            if(val[msk] == i)
                me = min(me, prob[i] * solve(mask ^ msk));
        ans += me;
    }
    return ret = ans;
}

double EmptyTheBox::minExpectedPenalty(int D, int T)
{
    ::D = D, ::T = T;
    n = min(T, 2 * D);

    prob.assign(2 * D + 1, 0);
    for(int i = 1; i <= D; i++)
        for(int j = 1; j <= D; j++)
            prob[i + j] += 1;
    for(int i = 1; i <= 2 * D; i++)
        prob[i] /= D * D;

    double ans = 0;
    for(int i = n + 1; i <= T; i++)
        ans += i;
    val.assign(1 << n, 0);
    for(int i = 0; i < 1 << n; i++)
        for(int j = 0; j < n; j++)
            if((i >> j) & 1)
                val[i] += j + 1;

    clr(dp, -1);
    ans += solve((1 << n) - 1);

    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, double p2)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1;
    cout << "]" << endl;
    EmptyTheBox *obj;
    double answer;
    obj = new EmptyTheBox();
    clock_t startTime = clock();
    answer = obj->minExpectedPenalty(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    double p2;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = 3;
        p2 = 1.25;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 6;
        p1 = 2;
        p2 = 2.777777777777778;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 6;
        p1 = 10;
        p2 = 16.64572136166177;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 4;
        p1 = 10;
        p2 = 33.489906787872314;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
