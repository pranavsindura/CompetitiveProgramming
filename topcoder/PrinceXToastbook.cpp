#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 1e6 + 5;
double fact[52];

void init()
{
    fact[0] = 1;
    for(int i = 1; i < 52; i++)
        fact[i] = fact[i - 1] * i;
}

class PrinceXToastbook
{
public:
    double eat(vector <int>);
};

double PrinceXToastbook::eat(vector <int> prerequisite)
{
    init();
    int n = sz(prerequisite);
    vector<vector<int>> adj(n);
    for(int i = 0; i < n; i++)
        if(~prerequisite[i])
            adj[prerequisite[i]].pb(i);

    vector<bool> vis(n, false), done(n, false);
    vector<int> top;

    function<void(int)> topsort = [&](int u)
    {
        vis[u] = 1;
        for(int v : adj[u])
            if(!vis[v])
                topsort(v);
        top.pb(u);
    };

    function<double(int, int)> dfs = [&](int u, int d)
    {
        vis[u] = 1;
        if(~prerequisite[u] && !done[prerequisite[u]])
            return 0.0;

        done[u] = 1;
        double x = 1 / fact[d + 1];
        for(int v : adj[u])
            if(!vis[v])
                x += dfs(v, d + 1);
        return x;
    };

    for(int i = 0; i < n; i++)
        if(!vis[i])
            topsort(i);

    double ans = 0;
    reverse(all(top));

    fill(all(vis), false);

    for(int i = 0; i < n; i++)
        if(!vis[top[i]])
            ans += dfs(top[i], 0);

    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, double p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    PrinceXToastbook *obj;
    double answer;
    obj = new PrinceXToastbook();
    clock_t startTime = clock();
    answer = obj->eat(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    double p1;

    {
        // ----- test 0 -----
        int t0[] = {-1, 0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1.5;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {-1, 0, 1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1.6666666666666667;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {1, -1, 1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2.0;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {1, 0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0.0;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {-1, -1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2.0;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
