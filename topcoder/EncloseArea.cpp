#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e5 + 5;

class EncloseArea
{
public:
    vector <string> enclose(int);
};
const int N = 50;
bool vis[N + 5][N + 5];
vector<string> ans;
bool valid(int x, int y)
{
    return (x >= 1 && x <= N - 1 && y >= 1 && y <= N - 1);
}

void dfs(int x, int y, int &need)
{
    need--;
    vis[x][y] = 1;
    if(valid(x + 1, y + 1))
    {
        if(!vis[x + 1][y + 1])
        {
            if(need > 0) // want to visit?
                dfs(x + 1, y + 1, need);
            else // put a wall
                ans[x][y] = ((x + y) % 2 ? '\\' : '/');
        }
    }
    else // put a wall
        ans[x][y] = ((x + y) % 2 ? '\\' : '/');

    if(valid(x - 1, y + 1 ))
    {
        if(!vis[x - 1][y + 1])
        {
            if(need > 0)
                dfs(x - 1, y + 1, need);
            else
                ans[x - 1][y] = ((x - 1 + y) % 2 ? '\\' : '/');
        }
    }
    else
        ans[x - 1][y] = ((x - 1 + y) % 2 ? '\\' : '/');

    if(valid(x - 1, y - 1 ))
    {
        if(!vis[x - 1][y - 1])
        {
            if(need > 0)
                dfs(x - 1, y - 1, need);
            else
                ans[x - 1][y - 1] = ((x - 1 + y - 1) % 2 ? '\\' : '/');
        }
    }
    else
        ans[x - 1][y - 1] = ((x - 1 + y - 1) % 2 ? '\\' : '/');

    if(valid(x + 1, y - 1))
    {
        if(!vis[x + 1][y - 1])
        {
            if(need > 0)
                dfs(x + 1, y - 1, need);
            else
                ans[x][y - 1] = ((x + y - 1) % 2 ? '\\' : '/');
        }
    }
    else
        ans[x][y - 1] = ((x + y - 1) % 2 ? '\\' : '/');
}

vector <string> EncloseArea::enclose(int A)
{
    if(A & 1) return {};
    ans = vector<string>(N, string(N, '.'));
    clr(vis, 0);
    int need = A / 2;
    dfs(1, 1, need);
    if(need > 0) return {};
    else return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, vector <string> p1)
{
    cout << "Test " << testNum << ": [" << p0;
    cout << "]" << endl;
    EncloseArea *obj;
    vector <string> answer;
    obj = new EncloseArea();
    clock_t startTime = clock();
    answer = obj->enclose(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i)
        {
            if (i > 0)
            {
                cout << ",";
            }
            cout << "\"" << p1[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if (hasAnswer)
    {
        if (answer.size() != p1.size())
        {
            res = false;
        }
        else
        {
            for (int i = 0; int(answer.size()) > i; ++i)
            {
                if (answer[i] != p1[i])
                {
                    res = false;
                }
            }
        }
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    vector <string> p1;

    {
        // ----- test 0 -----
        p0 = 12;
        string t1[] = {"........", "../\\....", "./..\\...", ".\\...\\..", "..\\../..", "...\\/...", "........", "........"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 7;
        p1.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 2402;
        p1.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 10;
        string t1[] = {"./\\..", "/./..", "\\.\\/\\", ".\\../", "..\\/." };
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 26;
        string t1[] = {"/\\/\\/\\", "\\..../", "/....\\", "\\..../", "/....\\", "\\/\\/\\/" };
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 18;
        string t1[] = {"/\\/\\/\\", "\\..../", "/....\\", "\\..../", "/....\\", "\\/\\/\\/" };
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
