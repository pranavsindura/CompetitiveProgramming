#include<bits/stdc++.h>
#define ll long long int
#define ld long double
#define pi pair<int,int>
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define sz(x) ((int)x.size())
#define ln(x) ((int)x.length())
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
#define clr(x,v) memset(x, v, sizeof(x))
#define dblout(x) cout << setprecision(x) << fixed;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const ll mod = 1e9 + 7;
const int MAXN = 1e6 + 5;

class MagicalGirlLevelTwoDivOne
{
public:
    int theCount(vector <string>, int, int);
};

int n, m;
bool can[15][15][2];
int blanks[15][15];
ll p[3005][2];
ll dp[15][1 << 10];

ll solve(int c, int mask)
{
    ll &ret = dp[c][mask];
    if(~ret)
        return ret;

    if(c == m)
        return ret = (mask == (1 << n) - 1);

    ll ans = 0;
    // Place a mask here
    for(int msk = 0; msk < (1 << n); msk++)
    {
        if(__builtin_popcount(msk) % 2 == 0) continue;
        bool valid = true;
        ll mul = 1;
        for(int i = 0; i < n; i++)
        {
            int b = (msk >> i) & 1;
            valid &= can[i][c][b];
            mul *= p[blanks[i][c]][b], mul %= mod;
        }
        if(valid)
            ans += (mul * solve(c + 1, mask ^ msk)) % mod, ans %= mod;
    }
    return ret = ans;
}

int MagicalGirlLevelTwoDivOne::theCount(vector <string> palette, int n, int m)
{
    p[0][0] = p[0][1] = 1;
    for(int i = 1; i < 3000; i++)
        p[i][0] = (p[i - 1][0] * 4) % mod, p[i][1] = (p[i - 1][1] * 5) % mod;

    ::n = n, ::m = m;
    clr(can, true);
    clr(blanks, 0);
    int H = sz(palette), W = sz(palette[0]);
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            vector<int> par(2);
            int blank = 0;
            for(int a = 0; a < H; a++)
            {
                for(int b = 0; b < W; b++)
                {
                    int x = a % n, y = b % m;
                    if(x == i && y == j)
                    {
                        if(palette[a][b] != '.')
                            par[(palette[a][b] - '0') & 1]++;
                        else
                            blank++;
                    }
                }
            }
            if(par[0]) can[i][j][1] = 0;
            if(par[1]) can[i][j][0] = 0;
            blanks[i][j] = blank;
        }
    }
    clr(dp, -1);
    return solve(0, 0);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1 << "," << p2;
    cout << "]" << endl;
    MagicalGirlLevelTwoDivOne *obj;
    int answer;
    obj = new MagicalGirlLevelTwoDivOne();
    clock_t startTime = clock();
    answer = obj->theCount(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}

int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        string t0[] = {"12", "2."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 2;
        p3 = 5;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"21", "1."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 2;
        p3 = 4;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"...", "...", "..."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        p2 = 1;
        p3 = 1953125;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"..58..", "..47.."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 3;
        p3 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"...1.2.3", "4.5.6...", "...7.8.9", "1.2.3..."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 4;
        p2 = 4;
        p3 = 886073030;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        string t0[] = {"....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "...................."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 10;
        p2 = 10;
        p3 = 240076532;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
