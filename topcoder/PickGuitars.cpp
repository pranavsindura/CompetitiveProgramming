#include <bits/stdc++.h>
#define all(x)    x.begin(), x.end()
#define allr(x)   x.rbegin(), x.rend()
#define sz(x)     ((int)x.size())
#define ln(x)     ((int)x.length())
#define mp        make_pair
#define pb        push_back
#define ff        first
#define ss        second
#define endl      '\n'
#define dbg(x)    cout << #x << ": " << x << endl;
#define clr(x,v)  memset(x, v, sizeof(x));
#define fix(x)    cout << setprecision(x) << fixed;
#define FASTIO    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

using ll = long long int;
using ld = long double;
using pi = pair<int, int>;

const double PI = acos(-1.0);
const double eps = 1e-9;
const ll mod = 1e9 + 7;
const int inf = 1e7;
const int MAXN = 1e5 + 5;

class PickGuitars
{
public:
    int maxValue(vector <int>);
};

bool vis[55][55][2];
array<int, 2> dp[55][55][2];
vector<int> arr;
array<int, 2> solve(int l, int r, int player)
{
    if(l > r) return {0, 0};
    array<int, 2> &ret = dp[l][r][player];
    if(vis[l][r][player]) return ret;
    vis[l][r][player] = 1;
    array<int, 2> best = {0, 0};
    for(int k = l; k <= r; k++)
    {
        array<int, 2> me = {0, 0};
        me[player] += arr[k];
        auto L = solve(l, k - 1, player ^ 1);
        auto R = solve(k + 1, r, player ^ 1);
        me[0] += L[0], me[1] += L[1];
        me[0] += R[0], me[1] += R[1];
        if(me[player] > best[player] || (me[player] == best[player] && me[player ^ 1] < best[player ^ 1]))
            best = me;
    }

    return ret = best;
}

int PickGuitars::maxValue(vector <int> guitarValues)
{
    int ans = 0;
    int n = sz(guitarValues);
    for(int i = 0; i < n; i++)
    {
        arr.clear();
        for(int j = i + 1; j < n; j++) arr.push_back(guitarValues[j]);
        for(int j = 0; j < i; j++) arr.push_back(guitarValues[j]);
        clr(vis, false);
        array<int, 2> take = solve(0, n - 2, 1);
        take[0] += guitarValues[i];
        ans = max(ans, take[0]);
    }
    return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    PickGuitars *obj;
    int answer;
    obj = new PickGuitars();
    clock_t startTime = clock();
    answer = obj->maxValue(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;

    {
        // ----- test 0 -----
        int t0[] = {1, 5, 3, 4, 5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 10;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {4, 8, 4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 12;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {2, 1, 4, 1, 2, 1, 8, 1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 12;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
